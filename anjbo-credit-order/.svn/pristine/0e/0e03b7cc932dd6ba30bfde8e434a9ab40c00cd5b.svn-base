<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.anjbo.dao.OrderFlowMapper">
	<!-- -->
	<select id="selectOrderFlowList" parameterType="java.lang.String" resultType="OrderFlowDto">
		select * from tbl_order_flow where orderNo = #{orderNo} order by handleTime
	</select>
	
	<insert id="addOrderFlow" parameterType="OrderFlowDto">
		insert into tbl_order_flow 
		(
			createUid,
			createTime,
			updateUid,
			orderNo,
			currentProcessId,
			nextProcessId,
			handleUid,
			handleTime,
			backReason,
			<if test="isNewWalkProcess !=null and isNewWalkProcess > 0">
			isNewWalkProcess,
			</if>
			returnType
		)
		values
		(
			#{updateUid},
			now(),
			#{updateUid},
			#{orderNo},
			#{currentProcessId},
			#{nextProcessId},
			#{handleUid},
			now(),
			#{backReason},
			<if test="isNewWalkProcess !=null and isNewWalkProcess > 0">
			#{isNewWalkProcess},
			</if>
			#{returnType}
		)
	</insert>
	
	<select id="selectEndOrderFlow" parameterType="OrderFlowDto" resultType="OrderFlowDto">
		select * from tbl_order_flow where orderNo = #{orderNo} ORDER BY createTime desc LIMIT 0,1 
	</select>
	
	<delete id="deleteOrderFlow" parameterType="OrderFlowDto">
		delete from tbl_order_flow where orderNo = #{orderNo} ORDER BY createTime desc LIMIT 1
	</delete>
	
	<select id="selectOrderNoByUid" parameterType="java.lang.String" resultType="java.lang.String">
		select DISTINCT(orderNo) from tbl_order_flow a where a.handleUid = #{0};
	</select>
	
	<select id="withdrawOrder" parameterType="java.lang.String">
		call p_withdrawOrder(#{0,mode=IN,jdbcType=INTEGER})
	</select>
	<select id="selectOrderFlowAll" resultType="StatisticsDto" parameterType="OrderFlowDto">
	   select updateUid,createUid,orderNo,handleTime as backTime,backReason,DATE_FORMAT(handleTime,'%Y-%m-%d %H:%i:%s') as bankTimeStr,returnType,isNewWalkProcess
	   from tbl_order_flow 
	   where backReason is not null and backReason !=''
	   <if test="handleTimeStart !=null and handleTimeStart !=''">
			and  <![CDATA[ handleTime >= #{handleTimeStart} ]]>
		</if>
		<if test="handleTimeEnd !=null and handleTimeEnd !=''">
			and  <![CDATA[ handleTime <= #{handleTimeEnd} ]]>
		</if>
	    limit #{start},#{pageSize}
	</select>
	<select id="selectOrderFlowCount" resultType="java.lang.Integer" parameterType="OrderFlowDto">
	    select count(*) from tbl_order_flow  
	    where backReason is not null and backReason !=''
	   <if test="handleTimeStart !=null and handleTimeStart !=''">
			and  <![CDATA[ handleTime >= #{handleTimeStart} ]]>
		</if>
		<if test="handleTimeEnd !=null and handleTimeEnd !=''">
			and  <![CDATA[ handleTime <= #{handleTimeEnd} ]]>
		</if>
	</select>
	<select id="selectHandTime" resultType="java.lang.String" parameterType="OrderFlowDto">
	    select DATE_FORMAT(handleTime,'%Y-%m-%d %H:%i:%s') as beginHandleTimeStr from tbl_order_flow where id=(
		   select min(id) from tbl_order_flow where handleTime>#{handleTime} and orderNo =#{orderNo}
			) 
	</select>
	
	<insert id="copyFlows" parameterType="Map">
		INSERT INTO tbl_order_flow (
			createUid,
			createTime,
			updateUid,
			updateTime,
			orderNo,
			currentProcessId,
			nextProcessId,
			handleUid,
			handleTime,
			isNewWalkProcess
		) SELECT
			createUid,
			createTime,
			updateUid,
			updateTime,
			#{orderNo},
			currentProcessId,
			nextProcessId,
			handleUid,
			handleTime,
			isNewWalkProcess
		FROM
			tbl_order_flow
		WHERE
			orderNo = #{relationOrderNo}
		AND (
			currentProcessId = 'notarization'
			OR currentProcessId = 'facesign'
		)
	</insert>
</mapper>