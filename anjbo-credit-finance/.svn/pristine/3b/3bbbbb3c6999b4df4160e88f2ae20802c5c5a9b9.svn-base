package com.anjbo.controller;

import com.anjbo.bean.common.DictDto;
import com.anjbo.bean.customer.AgencyDto;
import com.anjbo.bean.finance.PaymentReportDto;
import com.anjbo.bean.finance.ReportDto;
import com.anjbo.bean.finance.ReportReplyRecordDto;
import com.anjbo.bean.order.OrderListDto;
import com.anjbo.bean.product.ProductDto;
import com.anjbo.bean.user.UserDto;
import com.anjbo.common.*;
import com.anjbo.service.ReportService;
import com.anjbo.utils.AmsUtil;
import com.anjbo.utils.CommonDataUtil;
import com.anjbo.utils.ConfigUtil;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * 出款报备
 * Created by Administrator on 2017/9/22.
 */
@Controller
@RequestMapping("/credit/finance/report/v")
public class ReportController extends BaseController{
	private Logger log = Logger.getLogger(getClass());
	@Resource
	private ReportService reportService;
	@Resource
	private PaymentReportController paymentReportController;
	@ResponseBody
	@RequestMapping("/list")
	public RespPageData<ReportDto> list(HttpServletRequest request, @RequestBody ReportDto obj){
		RespPageData<ReportDto> resp = new RespPageData<ReportDto>();
		resp.setCode(RespStatusEnum.FAIL.getCode());
		resp.setMsg(RespStatusEnum.FAIL.getMsg());
		try{
			UserDto userDto = getUserDto(request);
			if(userDto.getAgencyId()>1){
				obj.setAgencyId(userDto.getAgencyId());
			}
			resp.setTotal(reportService.listCount(obj));
			resp.setRows(reportService.list(obj));
			resp.setCode(RespStatusEnum.SUCCESS.getCode());
			resp.setMsg(RespStatusEnum.SUCCESS.getMsg());
		} catch (Exception e){
			resp.setCode(RespStatusEnum.FAIL.getCode());
			resp.setMsg(RespStatusEnum.FAIL.getMsg());
			log.error("加载出款报备异常:",e);
		}
		return resp;
	}
	@ResponseBody
	@RequestMapping("/listMap")
	public RespDataObject<Map<String,Object>> listMap(HttpServletRequest request, @RequestBody ReportDto obj){
		RespDataObject<Map<String,Object>> resp = new RespDataObject<Map<String,Object>>();
		try{
			if(StringUtils.isBlank(obj.getRelationOrderNo())){
				resp.setCode(RespStatusEnum.FAIL.getCode());
				resp.setMsg(RespStatusEnum.FAIL.getMsg());
				return resp;
			}
			Map<String,Object> map = reportService.listMap(obj);
			resp.setData(map);
			resp.setCode(RespStatusEnum.SUCCESS.getCode());
			resp.setMsg(RespStatusEnum.SUCCESS.getMsg());
		} catch (Exception e){
			log.error("加载出款报备异常:",e);
		}
		return resp;
	}
	@ResponseBody
	@RequestMapping("/appReportList")
	public RespDataObject<Map<String, Object>> appList(HttpServletRequest request,@RequestBody Map<String,Object> map){
		RespDataObject<Map<String, Object>> result = new RespDataObject<Map<String, Object>>();
		String arrangement = MapUtils.getString(map,"arrangement");
		Integer start = MapUtils.getInteger(map,"start",0);
		Integer pageSize = MapUtils.getInteger(map,"pageSize",15);
		if(StringUtils.isBlank(arrangement)){
			RespHelper.setFailDataObject(result, Collections.EMPTY_MAP,RespStatusEnum.FAIL.getMsg());
			logger.info("查询报备列表缺少arrangement参数区别回款与出款");
			return result;
		}
		String customerName = MapUtils.getString(map,"customerName");
		if(arrangement.equals("reportList")){
			ReportDto obj = new ReportDto();
			obj.setCustomerName(customerName);
			obj.setStart(start);
			obj.setPageSize(pageSize);
			result = appReportList(request,obj);
		} else if(arrangement.equals("paymentReportList")){
			PaymentReportDto obj = new PaymentReportDto();
			obj.setCustomerName(customerName);
			obj.setStart(start);
			obj.setPageSize(pageSize);
			result = paymentReportController.appReportList(request,obj);
		}
		return result;
	}


	public RespDataObject<Map<String, Object>> appReportList(HttpServletRequest request, @RequestBody ReportDto obj){
		RespDataObject<Map<String, Object>> result = new RespDataObject<Map<String, Object>>();
		RespHelper.setFailDataObject(result, null, RespStatusEnum.FAIL.getMsg());
		try{
			//部门权限
			String deptAllUid = "";
			UserDto userDto = getUserDto(request);
			if(userDto.getIsEnable() == 3){
				RespHelper.setSuccessDataObject(result, null);
			}
			if(userDto.getAuthIds().contains("1")){
				if(userDto.getAgencyId()>1){
					obj.setAgencyId(userDto.getAgencyId());
				}
				//查看全部订单		
			}else if(userDto.getAuthIds().contains("2")){ 
				//查看部门订单
				userDto.setCreateTime(null);
				userDto.setUpdateTime(null);
				RespDataObject<Map<String,String>> respTemp = httpUtil.getRespDataObject(Constants.LINK_CREDIT, "/credit/user/base/v/selectUidsByDeptId", userDto, Map.class);
				deptAllUid = MapUtils.getString(respTemp.getData(), "uids");		
			}else{ 
				//查看自己订单
				deptAllUid = userDto.getUid();
			}
			obj.setChannelManagerUid(deptAllUid);
			obj.setAcceptMemberUid(deptAllUid);

			List<ReportDto> list = reportService.appList(obj);
			List<Map<String, Object>> orderList = new ArrayList<Map<String,Object>>();
			Map<String, Object> retMap = new HashMap<String, Object>();
			String cityName = "";
			String productName = "";
			Map<String, Object> tempMap = null;
			for (ReportDto dto:list){
				tempMap = new HashMap<String, Object>();
				cityName = "";
				productName = "";
				if(StringUtils.isNotBlank(dto.getCityName())){
					cityName = dto.getCityName().replace("市", "");
				}
				if(StringUtils.isNotBlank(dto.getProductName())){
					productName = dto.getProductName().replace("债务", "");
				}
				tempMap.put("orderNo", dto.getOrderNo());
				tempMap.put("customerName", dto.getCustomerName()==null?"-":dto.getCustomerName());
				tempMap.put("cityName", cityName);
				tempMap.put("productName",productName);
				tempMap.put("borrowingAmount", dto.getLoanAmount()==null?"-":dto.getLoanAmount());
				tempMap.put("borrowingDay", dto.getBorrowingDays());
				tempMap.put("channelManagerName", dto.getChannelManagerName()==null?"-":dto.getChannelManagerName());
				tempMap.put("cooperativeAgencyName", dto.getCooperativeAgencyName()==null?"-":dto.getCooperativeAgencyName());
				tempMap.put("acceptMemberName", dto.getAcceptMemberName()==null?"-":dto.getAcceptMemberName());
				tempMap.put("state", dto.getState());
				tempMap.put("processId", dto.getProcessId());
				String butName = "查看详情";
				String pageType ="";
				if(userDto.getUid()!=null&&(userDto.getUid().equals(dto.getAcceptMemberUid())
						||userDto.getUid().equals(dto.getChannelManagerUid()))){
					butName = "撤销出款报备,修改出款报备";
					pageType ="cancelReport,editreport";
				}
				tempMap.put("butName", butName);
				tempMap.put("pageType", pageType);
				orderList.add(tempMap);
			}
			retMap.put("orderList", orderList);
			RespHelper.setSuccessDataObject(result, retMap);
		} catch (Exception e){
			RespHelper.setFailDataObject(result, null, RespStatusEnum.FAIL.getMsg());
			log.error("加载出款报备异常:",e);
		}
		return result;
	}

	@ResponseBody
	@RequestMapping("/detail")
	public RespDataObject<ReportDto> detail(HttpServletRequest request, @RequestBody ReportDto obj){
		RespDataObject<ReportDto> result = new RespDataObject<ReportDto>();
		try {
			ReportDto dto = reportService.detail(obj);
			result.setData(dto);
			RespHelper.setSuccessDataObject(result, dto);
		} catch (Exception e){
			RespHelper.setFailDataObject(result, null, RespStatusEnum.FAIL.getMsg());
			log.error("加载出款报备详情异常:",e);
		}
		return result;
	}
	@ResponseBody
	@RequestMapping("/detailByStatus")
	public RespDataObject<ReportDto> detailByStatus(HttpServletRequest request, @RequestBody ReportDto obj){
		RespDataObject<ReportDto> result = new RespDataObject<ReportDto>();
		try {
			ReportDto dto = reportService.detailByStatus(obj);
			result.setData(dto);
			RespHelper.setSuccessDataObject(result, dto);
		} catch (Exception e){
			RespHelper.setFailDataObject(result, null, RespStatusEnum.FAIL.getMsg());
			log.error("加载出款报备详情异常:",e);
		}
		return result;
	}

	@ResponseBody
	@RequestMapping("/insert")
	public RespStatus insert(HttpServletRequest request, @RequestBody ReportDto obj){
		RespStatus result = new RespStatus();
		try{

			Calendar calendar = Calendar.getInstance();
			Integer time = ConfigUtil.getIntegerValue(Constants.BASE_FINANCE_OUTLOANREPORT_TIME,ConfigUtil.CONFIG_BASE);
			if(null==time){
				time = 18;
			}
			if(calendar.get(Calendar.HOUR_OF_DAY)>=time){
				RespHelper.setFailRespStatus(result,time+"点之后请明天再报备!");
				return result;
			}
			UserDto user = getUserDto(request);
			obj.setCreateUid(user.getUid());
			obj.setCreateName(user.getName());
			//获取所有城市
			List<DictDto> dictList = getDictDtoByType("bookingSzAreaOid");
			for (DictDto dictDto : dictList) {
				if(dictDto.getCode().equals(obj.getCityCode())){
					obj.setCityName(dictDto.getName());
					break;
				}
			}
			//获取产品名称
			List<ProductDto> prductList = getProductDtos();
			for (ProductDto productDto : prductList) {
				if(productDto.getProductCode().equals(obj.getProductCode())){
					obj.setProductName(productDto.getProductName());
					break;
				}
			}

			//渠道经理
			if(StringUtils.isNotBlank(obj.getChannelManagerUid())){
				obj.setChannelManagerName(CommonDataUtil.getUserDtoByUidAndMobile(obj.getChannelManagerUid()).getName());
			}
			//受理员
			if(StringUtils.isNotBlank(obj.getAcceptMemberUid())){
				obj.setAcceptMemberName(CommonDataUtil.getUserDtoByUidAndMobile(obj.getAcceptMemberUid()).getName());
			}

			//机构名称
			Map<String,Object> maps = new HashMap<String, Object>();
			maps.put("agencyId", obj.getCooperativeAgencyId());
			AgencyDto agency = httpUtil.getObject(Constants.LINK_CREDIT, "/credit/customer/agency/v/getAgencyDto", maps, AgencyDto.class);
			if(agency!=null){
				obj.setCooperativeAgencyName(agency.getName());
			}
			/*获取分配的资金方
            maps = new HashMap<String,Object>();
            maps.put("orderNo",obj.getOrderNo());
            Map<String,Object> fundMap = httpUtil.getObject(Enums.MODULAR_URL.CREDIT.toString(), "/credit/risk/allocationfund/v/getOrderNoMosaicFundCode", maps, Map.class);
            if(!MapUtils.isEmpty(fundMap)){
                String fund = MapUtils.getString(fundMap,obj.getOrderNo()+"desc","");
                obj.setFund(fund);
            }*/
			obj.setStatus(2);
			obj.setAgencyId(user.getAgencyId());
			reportService.insert(obj);
			RespHelper.setSuccessRespStatus(result);
		} catch (Exception e){
			RespHelper.setFailRespStatus(result,RespStatusEnum.FAIL.getMsg());
			log.error("新增报备信息异常:",e);
		}
		return result;
	}

	@ResponseBody
	@RequestMapping("/update")
	public RespStatus update(HttpServletRequest request, @RequestBody ReportDto obj){
		RespStatus result = new RespStatus();
		try{
			if(StringUtils.isBlank(obj.getOrderNo())){
				RespHelper.setFailRespStatus(result,"保存报备记录缺少订单编号");
				return result;
			}
			if(null!=obj.getStatus()&&1==obj.getStatus()){
				ReportDto tmp = reportService.detailById(obj);
				if(null!=tmp&&1==tmp.getStatus()){
					RespHelper.setFailRespStatus(result,"该出款报备已经确认放款不能重复确认");
					return result;
				} else if(null!=tmp&&3==tmp.getStatus()){
					RespHelper.setFailRespStatus(result,"该出款报备已经撤销不能执行确认放款操作");
					return result;
				}
			}

			UserDto user = getUserDto(request);
			if(null!=user) {
				obj.setUpdateUid(user.getUid());
			}
			reportService.update(obj);
			if(null!=obj.getFinanceOutLoanTime()){
				//发送短信给渠道经理与受理员
				ReportDto tmp = reportService.detailById(obj);
				String acceptMemberUid = tmp.getAcceptMemberUid();
				String channelManagerUid = tmp.getChannelManagerUid();
				UserDto acceptMember = getUserDtoByUid(acceptMemberUid);
				UserDto channelManager = getUserDtoByUid(channelManagerUid);
				String ipWhite = ConfigUtil.getStringValue(Constants.BASE_AMS_IPWHITE,ConfigUtil.CONFIG_BASE);
				SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
				if(null!=acceptMember){
					AmsUtil.smsSend(acceptMember.getMobile(), ipWhite,Constants.SMS_FINANCE_REPORT_FINANCEOUTLOAN,tmp.getCustomerName(),tmp.getLoanAmount(),format.format(obj.getFinanceOutLoanTime()));
				}
				if(null!=channelManager){
					AmsUtil.smsSend(channelManager.getMobile(), ipWhite,Constants.SMS_FINANCE_REPORT_FINANCEOUTLOAN,tmp.getCustomerName(),tmp.getLoanAmount(),format.format(obj.getFinanceOutLoanTime()));
				}
			}
			RespHelper.setSuccessRespStatus(result);
		} catch (Exception e){
			RespHelper.setFailRespStatus(result,RespStatusEnum.FAIL.getMsg());
			log.error("更新报备信息异常:",e);
		}
		return result;
	}
	@ResponseBody
	@RequestMapping("/insertReplyRecord")
	public RespStatus insertReplyRecord(HttpServletRequest request, @RequestBody ReportReplyRecordDto obj){
		RespStatus result = new RespStatus();
		try{
			if (StringUtils.isBlank(obj.getOrderNo())){
				RespHelper.setFailRespStatus(result,"保存报备回复记录缺少订单编号");
				return result;
			} else if(StringUtils.isBlank(obj.getReplyContent())){
				RespHelper.setFailRespStatus(result,"请填写回复信息");
				return result;
			} else if(obj.getReportId()<=0){
				RespHelper.setFailRespStatus(result,"缺少出款报备主键");
				return result;
			}
			ReportDto reportDto = new ReportDto();
			reportDto.setOrderNo(obj.getOrderNo());
			reportDto = reportService.detail(reportDto);
			if(null!=reportDto&&1==reportDto.getStatus()){
				RespHelper.setFailRespStatus(result,"该出款报备已放款不能再回复");
				return result;
			} else if(null!=reportDto&&3==reportDto.getStatus()){
				RespHelper.setFailRespStatus(result,"该出款报备已撤销不能再回复");
				return result;
			}
			UserDto user = getUserDto(request);
			obj.setCreateUid(user.getUid());
			int success = reportService.insertReplyRecord(obj);
			if(success<1){
				RespHelper.setFailRespStatus(result,"保存报备回复记录失败");
				return result;
			}
			UserDto acceptMember = new UserDto();
			UserDto channelManager = new UserDto();
			if(null!=reportDto){
				acceptMember = CommonDataUtil.getUserDtoByUidAndMobile(reportDto.getAcceptMemberUid());
				channelManager = CommonDataUtil.getUserDtoByUidAndMobile(reportDto.getChannelManagerUid());
				reportDto.setAcceptMemberName(acceptMember.getName());
			}
			String ipWhite = ConfigUtil.getStringValue(Constants.BASE_AMS_IPWHITE,ConfigUtil.CONFIG_BASE);
			//发送短信给受理员
			if(null!=acceptMember&&StringUtils.isNotBlank(acceptMember.getMobile())){
				AmsUtil.smsSend(acceptMember.getMobile(), ipWhite,Constants.SMS_REPORT_REPLY_RECORD,reportDto.getCustomerName(),reportDto.getLoanAmount());
			}
			//发送短信给渠道经理
			if(null!=channelManager&&StringUtils.isNotBlank(channelManager.getMobile())){
				AmsUtil.smsSend(channelManager.getMobile(), ipWhite,Constants.SMS_REPORT_REPLY_RECORD,reportDto.getCustomerName(),reportDto.getLoanAmount());
			} else {
				log.info("财务回复信息没有获取到渠道经理信息或者渠道经理的手机号码为空!");
			}
			RespHelper.setSuccessRespStatus(result);
		} catch (Exception e){
			RespHelper.setFailRespStatus(result,RespStatusEnum.FAIL.getMsg());
			log.error("新增修改回复记录信息异常:",e);
		}
		return result;
	}
	@ResponseBody
	@RequestMapping("/cancelReport")
	public RespDataObject<Map<String,Object>> cancelAppReport(HttpServletRequest request,@RequestBody Map<String,Object> map){
		String orderNo = MapUtils.getString(map,"orderNo");
		String arrangement = MapUtils.getString(map,"arrangement");
		RespDataObject<Map<String,Object>> result = null;
		if("cancelReport&orderList".equals(arrangement)
				||"cancelReport".equals(arrangement)){
			ReportDto obj = new ReportDto();
			obj.setOrderNo(orderNo);
			obj.setArrangement(arrangement);
			result = cancelReport(request,obj);
		} else if("cancelPaymentReport&orderList".equals(arrangement)
				||"cancelPaymentReport".equals(arrangement)){
			PaymentReportDto obj = new PaymentReportDto();
			obj.setOrderNo(orderNo);
			obj.setArrangement(arrangement);
			result = paymentReportController.cancelReport(request,obj);
		}
		return result;
	}

	public RespDataObject<Map<String,Object>> cancelReport(HttpServletRequest request, @RequestBody ReportDto obj){
		RespDataObject<Map<String,Object>> result = new RespDataObject<Map<String,Object>>();
		try{
			if (StringUtils.isBlank(obj.getOrderNo())){
				RespHelper.setFailRespStatus(result,"撤销报备缺少订单编号");
				return result;
			}

			ReportDto reportDto = new ReportDto();
			reportDto.setOrderNo(obj.getOrderNo());
			reportDto = reportService.detail(reportDto);
			if(null!=reportDto&&1==reportDto.getStatus()){
				RespHelper.setFailRespStatus(result,"该出款报备已放款不能再撤销");
				return result;
			} else if(null!=reportDto&&3==reportDto.getStatus()){
				RespHelper.setFailRespStatus(result,"该出款报备已撤销不能再重复撤销");
				return result;
			}
			UserDto userDto = getUserDto(request);
			reportService.cancelReport(obj,userDto);
			Map<String, Object> tempMap = new HashMap<String, Object>();
			if(StringUtils.isNotBlank(obj.getArrangement())
					&&obj.getArrangement().contains("orderList")){
				OrderListDto orderDto = new OrderListDto();
				orderDto.setOrderNo(obj.getOrderNo());
				orderDto = httpUtil.getObject(Constants.LINK_CREDIT, "/credit/order/base/v/selectDetailByOrderNo", orderDto, OrderListDto.class);
				encapsulation(tempMap,orderDto,userDto);
			}
			RespHelper.setSuccessDataObject(result,tempMap);
		} catch (Exception e){
			RespHelper.setFailRespStatus(result,RespStatusEnum.FAIL.getMsg());
			log.error("撤销出款报备信息异常:",e);
		}
		return result;
	}
	public void encapsulation(Map<String,Object> tempMap,OrderListDto orderDto,UserDto userDto){
		if(null==orderDto) orderDto = new OrderListDto();
		String cityName = "";
		String productName = "";
		if(StringUtils.isNotBlank(orderDto.getCityName())){
			cityName = orderDto.getCityName().replace("市", "");
		}
		if(StringUtils.isNotBlank(orderDto.getProductName())){
			productName = orderDto.getProductName().replace("债务", "");
		}
		tempMap.put("orderNo", orderDto.getOrderNo());
		tempMap.put("customerName", orderDto.getCustomerName()==null?"-":orderDto.getCustomerName());
		tempMap.put("cityName", cityName);
		tempMap.put("productName",productName);
		tempMap.put("borrowingAmount", orderDto.getBorrowingAmount()==null?"-":orderDto.getBorrowingAmount());
		tempMap.put("borrowingDay", orderDto.getBorrowingDay());
		tempMap.put("channelManagerName", orderDto.getChannelManagerName()==null?"-":orderDto.getChannelManagerName());
		tempMap.put("cooperativeAgencyName", orderDto.getCooperativeAgencyName()==null?"-":orderDto.getCooperativeAgencyName());
		tempMap.put("acceptMemberName", orderDto.getAcceptMemberName()==null?"-":orderDto.getAcceptMemberName());
		tempMap.put("state", orderDto.getState());
		tempMap.put("currentHandler", orderDto.getCurrentHandler());
		tempMap.put("processId", orderDto.getProcessId());
		tempMap.put("productCode", orderDto.getProductCode());
		String butName = "";
		String pageType ="";
		if(orderDto.getProcessId().contains("managerAudit")){
		} else if(orderDto.getProcessId().contains("auditFirst")){
		} else if(orderDto.getProcessId().contains("auditFinal")){
			if(orderDto.getCurrentHandlerUid().equals(userDto.getUid())){
				if(orderDto.getState().contains("退回")){
					tempMap.put("butName", "重新风控终审");
				}else{
					tempMap.put("butName", "风控终审");
				}
				tempMap.put("pageType", orderDto.getProcessId());
			}
		}else if(orderDto.getProcessId().contains("auditOfficer")){
			if(orderDto.getCurrentHandlerUid().equals(userDto.getUid())){
				if(orderDto.getState().contains("退回")){
					tempMap.put("butName", "重新风险官审批");
				}else{
					tempMap.put("butName", "风险官审批");
				}
				tempMap.put("pageType", orderDto.getProcessId());
			}
		} else if(orderDto.getProcessId().contains("allocationFund")){
		} else if(orderDto.getState().contains("公证")){
			butName = MapUtils.getString(tempMap,"butName","");
			pageType = MapUtils.getString(tempMap,"pageType","");
			if(userDto.getUid().equals(orderDto.getCurrentHandlerUid())){
				butName = StringUtils.isBlank(butName)?"公证":butName+",公证";
				pageType = StringUtils.isBlank(pageType)?"notarization":pageType+",notarization";
				tempMap.put("butName", butName);
				tempMap.put("pageType", pageType);
			}
		} else if(orderDto.getState().contains("面签")){
			butName = MapUtils.getString(tempMap,"butName","");
			pageType = MapUtils.getString(tempMap,"pageType","");
			if(userDto.getUid().equals(orderDto.getCurrentHandlerUid())){
				butName = StringUtils.isBlank(butName)?"面签":butName+",面签";
				pageType = StringUtils.isBlank(pageType)?"facesign":pageType+",facesign";
				tempMap.put("butName", butName);
				tempMap.put("pageType", pageType);
			}
		} else if(orderDto.getProcessId().contains("fundDocking")){
		} else if(orderDto.getProcessId().contains("element")){
		} else if(orderDto.getProcessId().contains("isLendingHarvest")){
		} else if(orderDto.getProcessId().contains("lendingPay")){
		} else if(orderDto.getProcessId().contains("lendingInstructions")){
		} else if(orderDto.getProcessId().contains("lending")){
		} else if(orderDto.getProcessId().contains("applyLoan")){
			if(orderDto.getCurrentHandlerUid().equals(userDto.getUid())){
				if(orderDto.getState().contains("退回")){
					tempMap.put("butName", "重新申请放款");
				}else{
					tempMap.put("butName", "申请放款");
				}
				tempMap.put("pageType", orderDto.getProcessId());
			}
		} else if(orderDto.getProcessId().contains("applyLoan")){
		}

		butName = MapUtils.getString(tempMap,"butName");
		pageType = MapUtils.getString(tempMap,"pageType");
		butName = StringUtils.isBlank(butName)?"出款报备":butName+",出款报备";
		pageType = StringUtils.isBlank(pageType)?"editreport":pageType+",editreport";
		tempMap.put("butName", butName);
		tempMap.put("pageType", pageType);
	}
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true)); // true:允许输入空值，false:不能为空值

	}
}
